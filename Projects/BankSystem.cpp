
---

# üìå –ù–æ–≤—ã–π –±–æ–ª—å—à–æ–π –ø—Ä–æ–µ–∫—Ç: **Bank Management System (–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞)**

‚ö° –≠—Ç–æ –±—É–¥–µ—Ç –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ –º–æ–∂–Ω–æ:  
- —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤,  
- –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å—á–µ—Ç–∞,  
- –≤–Ω–æ—Å–∏—Ç—å –∏ —Å–Ω–∏–º–∞—Ç—å –¥–µ–Ω—å–≥–∏,  
- –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏,  
- —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å—ë –≤ —Ñ–∞–π–ª.  

---

## üìÑ Projects/BankSystem.cpp

```cpp
#include <iostream>
#include <vector>
#include <fstream>
using namespace std;

struct Account {
    int id;
    string owner;
    double balance;

    Account(int i, string o, double b = 0.0)
        : id(i), owner(o), balance(b) {}
};

class Bank {
private:
    vector<Account> accounts;
    int nextId = 1;
public:
    void loadFromFile(const string &filename) {
        ifstream in(filename);
        if(!in.is_open()) return;

        accounts.clear();
        int id;
        string owner;
        double balance;

        while(in >> id) {
            in.ignore();
            getline(in, owner);
            in >> balance;
            accounts.push_back(Account(id, owner, balance));
            if(id >= nextId) nextId = id + 1;
        }
        in.close();
    }

    void saveToFile(const string &filename) {
        ofstream out(filename);
        for(auto &a : accounts) {
            out << a.id << "\n" << a.owner << "\n" << a.balance << "\n";
        }
        out.close();
    }

    void createAccount(string owner, double balance = 0.0) {
        accounts.push_back(Account(nextId++, owner, balance));
        cout << "–°—á—ë—Ç —Å–æ–∑–¥–∞–Ω!\n";
    }

    void listAccounts() {
        cout << "–°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤:\n";
        for(auto &a : accounts) {
            cout << a.id << ". " << a.owner << " ‚Äî –ë–∞–ª–∞–Ω—Å: " << a.balance << endl;
        }
    }

    Account* findAccount(int id) {
        for(auto &a : accounts) {
            if(a.id == id) return &a;
        }
        return nullptr;
    }

    void deposit(int id, double amount) {
        Account* acc = findAccount(id);
        if(acc) {
            acc->balance += amount;
            cout << "–í–Ω–µ—Å–µ–Ω–æ: " << amount << ". –ë–∞–ª–∞–Ω—Å: " << acc->balance << endl;
        } else cout << "–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n";
    }

    void withdraw(int id, double amount) {
        Account* acc = findAccount(id);
        if(acc) {
            if(acc->balance >= amount) {
                acc->balance -= amount;
                cout << "–°–Ω—è—Ç–æ: " << amount << ". –ë–∞–ª–∞–Ω—Å: " << acc->balance << endl;
            } else cout << "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n";
        } else cout << "–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n";
    }

    void transfer(int fromId, int toId, double amount) {
        Account* from = findAccount(fromId);
        Account* to = findAccount(toId);
        if(from && to) {
            if(from->balance >= amount) {
                from->balance -= amount;
                to->balance += amount;
                cout << "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ " << amount << " –æ—Ç " << from->owner << " –∫ " << to->owner << endl;
            } else cout << "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n";
        } else cout << "–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n";
    }
};

int main() {
    Bank bank;
    string filename = "bank.txt";
    bank.loadFromFile(filename);

    int choice;
    string owner;
    double amount;
    int id, id2;

    while(true) {
        cout << "\n--- –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ ---\n";
        cout << "1. –°–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç\n2. –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤\n3. –ü–æ–ø–æ–ª–Ω–∏—Ç—å\n4. –°–Ω—è—Ç—å\n5. –ü–µ—Ä–µ–≤–µ—Å—Ç–∏\n6. –í—ã—Ö–æ–¥\n";
        cout << "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ";
        cin >> choice;

        switch(choice) {
            case 1:
                cin.ignore();
                cout << "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: ";
                getline(cin, owner);
                bank.createAccount(owner);
                break;
            case 2:
                bank.listAccounts();
                break;
            case 3:
                cout << "–í–≤–µ–¥–∏—Ç–µ ID: ";
                cin >> id;
                cout << "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ";
                cin >> amount;
                bank.deposit(id, amount);
                break;
            case 4:
                cout << "–í–≤–µ–¥–∏—Ç–µ ID: ";
                cin >> id;
                cout << "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ";
                cin >> amount;
                bank.withdraw(id, amount);
                break;
            case 5:
                cout << "–í–≤–µ–¥–∏—Ç–µ ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ";
                cin >> id;
                cout << "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ";
                cin >> id2;
                cout << "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ";
                cin >> amount;
                bank.transfer(id, id2, amount);
                break;
            case 6:
                bank.saveToFile(filename);
                cout << "–í—ã—Ö–æ–¥...\n";
                return 0;
            default:
                cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!\n";
        }
    }
}
